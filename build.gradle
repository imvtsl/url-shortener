plugins {
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id "io.freefair.lombok" version "6.5.1"
	id 'jacoco'
}

group = 'com.vatsal.project'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.13'
	implementation 'org.apache.commons:commons-lang3:3.12.0'

	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	useJUnitPlatform() {
		testLogging.showStandardStreams = true
	}
	//	comment below line(s) to execute tests
	//exclude 'com/cisco/cwplanning/cwputils/**'
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['com/vatsal/project/urlshortener/dto/**',
							  'com/vatsal/project/urlshortener/constant/**'])
		}))
	}
}

jacoco {
	toolVersion = "0.8.8"
//	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
	testLogging {
		// set options for log level LIFECYCLE
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		// set options for log level DEBUG and INFO
		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}
